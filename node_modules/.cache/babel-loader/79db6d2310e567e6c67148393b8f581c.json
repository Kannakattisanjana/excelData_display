{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useEffect } from \"react\";\nexport const useTableSearch = ({\n  searchVal,\n  retrieve\n}) => {\n  _s();\n\n  const [filteredData, setFilteredData] = useState([]);\n  const [origData, setOrigData] = useState([]);\n  const [searchIndex, setSearchIndex] = useState([]);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    setLoading(true);\n\n    const crawl = (user, allValues) => {\n      if (!allValues) allValues = [];\n\n      for (var key in user) {\n        if (typeof user[key] === \"object\") crawl(user[key], allValues);else allValues.push(user[key] + \" \");\n      }\n\n      return allValues;\n    };\n\n    const fetchData = async () => {\n      const {\n        data: users\n      } = await retrieve();\n      setOrigData(users);\n      setFilteredData(users);\n      const searchInd = users.map(user => {\n        const allValues = crawl(user);\n        return {\n          allValues: allValues.toString()\n        };\n      });\n      setSearchIndex(searchInd);\n      if (users) setLoading(false);\n    };\n\n    fetchData();\n  }, [retrieve]);\n  useEffect(() => {\n    if (searchVal) {\n      const reqData = searchIndex.map((user, index) => {\n        if (user.allValues.toLowerCase().indexOf(searchVal.toLowerCase()) >= 0) return origData[index];\n        return null;\n      });\n      setFilteredData(reqData.filter(user => {\n        if (user) return true;\n        return false;\n      }));\n    } else setFilteredData(origData);\n  }, [searchVal, origData, searchIndex]);\n  return {\n    filteredData,\n    loading\n  };\n};\n\n_s(useTableSearch, \"XI07xObxu7AEENAc+GVbS9bW4qc=\");","map":{"version":3,"sources":["/Users/kannakattisanjana/final_excel_data/src/useTableSearch.js"],"names":["useState","useEffect","useTableSearch","searchVal","retrieve","filteredData","setFilteredData","origData","setOrigData","searchIndex","setSearchIndex","loading","setLoading","crawl","user","allValues","key","push","fetchData","data","users","searchInd","map","toString","reqData","index","toLowerCase","indexOf","filter"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AAEA,OAAO,MAAMC,cAAc,GAAG,CAAC;AAAEC,EAAAA,SAAF;AAAaC,EAAAA;AAAb,CAAD,KAA6B;AAAA;;AACzD,QAAM,CAACC,YAAD,EAAeC,eAAf,IAAkCN,QAAQ,CAAC,EAAD,CAAhD;AACA,QAAM,CAACO,QAAD,EAAWC,WAAX,IAA0BR,QAAQ,CAAC,EAAD,CAAxC;AACA,QAAM,CAACS,WAAD,EAAcC,cAAd,IAAgCV,QAAQ,CAAC,EAAD,CAA9C;AACA,QAAM,CAACW,OAAD,EAAUC,UAAV,IAAwBZ,QAAQ,CAAC,IAAD,CAAtC;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACdW,IAAAA,UAAU,CAAC,IAAD,CAAV;;AACA,UAAMC,KAAK,GAAG,CAACC,IAAD,EAAOC,SAAP,KAAqB;AACjC,UAAI,CAACA,SAAL,EAAgBA,SAAS,GAAG,EAAZ;;AAChB,WAAK,IAAIC,GAAT,IAAgBF,IAAhB,EAAsB;AACpB,YAAI,OAAOA,IAAI,CAACE,GAAD,CAAX,KAAqB,QAAzB,EAAmCH,KAAK,CAACC,IAAI,CAACE,GAAD,CAAL,EAAYD,SAAZ,CAAL,CAAnC,KACKA,SAAS,CAACE,IAAV,CAAeH,IAAI,CAACE,GAAD,CAAJ,GAAY,GAA3B;AACN;;AACD,aAAOD,SAAP;AACD,KAPD;;AAQA,UAAMG,SAAS,GAAG,YAAY;AAC5B,YAAM;AAAEC,QAAAA,IAAI,EAAEC;AAAR,UAAkB,MAAMhB,QAAQ,EAAtC;AACAI,MAAAA,WAAW,CAACY,KAAD,CAAX;AACAd,MAAAA,eAAe,CAACc,KAAD,CAAf;AACA,YAAMC,SAAS,GAAGD,KAAK,CAACE,GAAN,CAAUR,IAAI,IAAI;AAClC,cAAMC,SAAS,GAAGF,KAAK,CAACC,IAAD,CAAvB;AACA,eAAO;AAAEC,UAAAA,SAAS,EAAEA,SAAS,CAACQ,QAAV;AAAb,SAAP;AACD,OAHiB,CAAlB;AAIAb,MAAAA,cAAc,CAACW,SAAD,CAAd;AACA,UAAID,KAAJ,EAAWR,UAAU,CAAC,KAAD,CAAV;AACZ,KAVD;;AAWAM,IAAAA,SAAS;AACV,GAtBQ,EAsBN,CAACd,QAAD,CAtBM,CAAT;AAwBAH,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIE,SAAJ,EAAe;AACb,YAAMqB,OAAO,GAAGf,WAAW,CAACa,GAAZ,CAAgB,CAACR,IAAD,EAAOW,KAAP,KAAiB;AAC/C,YAAIX,IAAI,CAACC,SAAL,CAAeW,WAAf,GAA6BC,OAA7B,CAAqCxB,SAAS,CAACuB,WAAV,EAArC,KAAiE,CAArE,EACE,OAAOnB,QAAQ,CAACkB,KAAD,CAAf;AACF,eAAO,IAAP;AACD,OAJe,CAAhB;AAKAnB,MAAAA,eAAe,CACbkB,OAAO,CAACI,MAAR,CAAed,IAAI,IAAI;AACrB,YAAIA,IAAJ,EAAU,OAAO,IAAP;AACV,eAAO,KAAP;AACD,OAHD,CADa,CAAf;AAMD,KAZD,MAYOR,eAAe,CAACC,QAAD,CAAf;AACR,GAdQ,EAcN,CAACJ,SAAD,EAAYI,QAAZ,EAAsBE,WAAtB,CAdM,CAAT;AAgBA,SAAO;AAAEJ,IAAAA,YAAF;AAAgBM,IAAAA;AAAhB,GAAP;AACD,CA/CM;;GAAMT,c","sourcesContent":["import { useState, useEffect } from \"react\";\n\nexport const useTableSearch = ({ searchVal, retrieve }) => {\n  const [filteredData, setFilteredData] = useState([]);\n  const [origData, setOrigData] = useState([]);\n  const [searchIndex, setSearchIndex] = useState([]);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    setLoading(true);\n    const crawl = (user, allValues) => {\n      if (!allValues) allValues = [];\n      for (var key in user) {\n        if (typeof user[key] === \"object\") crawl(user[key], allValues);\n        else allValues.push(user[key] + \" \");\n      }\n      return allValues;\n    };\n    const fetchData = async () => {\n      const { data: users } = await retrieve();\n      setOrigData(users);\n      setFilteredData(users);\n      const searchInd = users.map(user => {\n        const allValues = crawl(user);\n        return { allValues: allValues.toString() };\n      });\n      setSearchIndex(searchInd);\n      if (users) setLoading(false);\n    };\n    fetchData();\n  }, [retrieve]);\n\n  useEffect(() => {\n    if (searchVal) {\n      const reqData = searchIndex.map((user, index) => {\n        if (user.allValues.toLowerCase().indexOf(searchVal.toLowerCase()) >= 0)\n          return origData[index];\n        return null;\n      });\n      setFilteredData(\n        reqData.filter(user => {\n          if (user) return true;\n          return false;\n        })\n      );\n    } else setFilteredData(origData);\n  }, [searchVal, origData, searchIndex]);\n\n  return { filteredData, loading };\n};\n"]},"metadata":{},"sourceType":"module"}